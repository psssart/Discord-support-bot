from __future__ import annotations
from typing import Optional

from discord.ext import commands
from discord import app_commands, Interaction, RawReactionActionEvent, PartialEmoji, Message, Member

from ..services.confronts import ConfrontService

def _as_str_emoji(emoji: PartialEmoji | str) -> str:
    return str(emoji)

class ConfrontsCog(commands.Cog):
    def __init__(self, bot: commands.Bot, svc: ConfrontService):
        self.bot = bot
        self.svc = svc


    @app_commands.command(name="confront", description="–°–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ: user [+ reaction] -> counterReaction")
    @app_commands.describe(
        user="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º —Å–ª–µ–¥–∏–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç—ã —Å–∞–º)",
        reaction="–≠–º–æ–¥–∑–∏-—Ç—Ä–∏–≥–≥–µ—Ä –Ω–∞ –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
        counterreaction="–≠–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—É—é –ø–æ—Å—Ç–∞–≤–∏—Ç –±–æ—Ç"
    )
    async def confront(self, itx: Interaction, user: Optional[Member] = None, reaction: Optional[str] = None, counterreaction: str = "üî´"):
        target_user = user or itx.user
        if not counterreaction or len(counterreaction.strip()) == 0:
            await itx.response.send_message("counterReaction –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω. –ù–µ –∏–∑–¥–µ–≤–∞–π—Å—è.", ephemeral=True)
            return

        trigger = reaction.strip() if reaction else None
        counter = counterreaction.strip()

        rid = await self.svc.add(
            guild_id=itx.guild_id,
            target_user_id=target_user.id,
            trigger_reaction=trigger,
            counter_reaction=counter,
            created_by=itx.user.id
        )
        txt = f"–î–æ–±–∞–≤–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #{rid}: <@{target_user.id}> " + (f"+ `{trigger}` " if trigger else "(–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è) ") + f"‚Üí `{counter}`"
        await itx.response.send_message(txt, ephemeral=True)

    @app_commands.command(name="confront_list", description="–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞")
    async def confront_list(self, itx: Interaction):
        rows = await self.svc.list(itx.guild_id)
        if not rows:
            await itx.response.send_message("–ü—É—Å—Ç–æ. –ù–∏ –æ–¥–Ω–æ–π –ø–∞—Å—Å–∏–≤–Ω–æ-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏.", ephemeral=True)
            return
        lines = []
        for r in rows:
            who = f"<@{r['target_user_id']}>"
            trig = f"`{r['trigger_reaction']}`" if r['trigger_reaction'] else "–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"
            lines.append(f"#{r['id']}: {who} ‚Äî {trig} ‚Üí `{r['counter_reaction']}` (by <@{r['created_by']}>)")
        await itx.response.send_message("\n".join(lines), ephemeral=True)

    @app_commands.command(name="confront_remove", description="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –ø–æ id")
    @app_commands.describe(id="ID –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ /confront_list")
    async def confront_remove(self, itx: Interaction, id: int):
        ok = await self.svc.remove(itx.guild_id, id)
        if ok:
            await itx.response.send_message(f"–£–¥–∞–ª–µ–Ω–æ –ø—Ä–∞–≤–∏–ª–æ #{id}. –¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç–∏ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ –Ω–∞ –ø–∏–∫–æ–≥—Ä–∞–º–º.", ephemeral=True)
        else:
            await itx.response.send_message("–ù–µ –Ω–∞—à—ë–ª —Ç–∞–∫–æ–µ –ø—Ä–∞–≤–∏–ª–æ. –ü—Ä–æ–≤–µ—Ä—è–π id.", ephemeral=True)

    @commands.Cog.listener()
    async def on_raw_reaction_add(self, payload: RawReactionActionEvent):
        if not payload.guild_id:
            return

        # —Ä–µ–∞–∫—Ü–∏–∏ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —Ç—Ä–∏–≥–≥–µ—Ä—è—Ç
        if payload.user_id == self.bot.user.id:
            return

        # –¥–æ—Å—Ç–∞—ë–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∞
        channel = self.bot.get_channel(payload.channel_id) or await self.bot.fetch_channel(payload.channel_id)
        try:
            msg = await channel.fetch_message(payload.message_id)
        except Exception:
            return

        if not msg.author:
            return

        # –±–µ—Ä—ë–º –≤—Å–µ –∫–æ–Ω—Ä–æ–Ω—Ñ—Ç—ã –≥–∏–ª—å–¥–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Ä—É –∏ —Ç—Ä–∏–≥–≥–µ—Ä—É
        rows = await self.svc.get_for_guild(payload.guild_id)
        if not rows:
            return

        trig_emoji = _as_str_emoji(payload.emoji)
        for r in rows:
            if r["target_user_id"] != msg.author.id:
                continue
            if not r["trigger_reaction"]:
                # —ç—Ç–æ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ –ø—Ä–æ —Ä–µ–∞–∫—Ü–∏–∏, –æ–Ω–æ –ø—Ä–æ –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                continue
            if r["trigger_reaction"] != trig_emoji:
                continue
            try:
                await msg.add_reaction(r["counter_reaction"])
            except Exception:
                pass

    @commands.Cog.listener()
    async def on_message(self, message: Message):
        # DM –Ω–µ —Ç—Ä–æ–≥–∞–µ–º, —Å–∞–º–æ–≥–æ –±–æ—Ç–∞ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
        if message.guild is None or message.author.bot:
            return

        rows = await self.svc.get_for_guild(message.guild.id)
        if not rows:
            return

        for r in rows:
            if r["target_user_id"] != message.author.id:
                continue
            # –¥–ª—è –ø—Ä–∞–≤–∏–ª –±–µ–∑ —Ç—Ä–∏–≥–≥–µ—Ä-—Ä–µ–∞–∫—Ü–∏–∏: —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞ –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if r["trigger_reaction"] is not None:
                continue
            try:
                await message.add_reaction(r["counter_reaction"])
            except Exception:
                pass
